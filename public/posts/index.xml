<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Yusuke Ohashi</title>
    <link>https://yusuke.cloud/posts/</link>
    <description>Recent content in Posts on Yusuke Ohashi</description>
    <image>
      <url>https://cdn.yusuke.cloud/assets/image/golden-gate-bridge.jpg</url>
      <link>https://cdn.yusuke.cloud/assets/image/golden-gate-bridge.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Oct 2021 12:00:00 +0000</lastBuildDate><atom:link href="https://yusuke.cloud/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>XCConfig</title>
      <link>https://yusuke.cloud/xcconfig/</link>
      <pubDate>Tue, 12 Oct 2021 12:00:00 +0000</pubDate>
      
      <guid>https://yusuke.cloud/xcconfig/</guid>
      <description>Externalize build information from Info.plist</description>
    </item>
    
    <item>
      <title>SwiftDoc Action for Fastlane</title>
      <link>https://yusuke.cloud/swiftdoc-action-for-fastlane/</link>
      <pubDate>Mon, 19 Jul 2021 06:01:57 +0000</pubDate>
      
      <guid>https://yusuke.cloud/swiftdoc-action-for-fastlane/</guid>
      <description>I just want to announce I created a fastlane action for SwiftDoc, since I couldn&amp;rsquo;t find it in the fastlane official docs.
SwiftDoc is yet another documentation generator, and it&amp;rsquo;s dedicated for Swift project. It has very clean UI and also generates beautiful dependency graph. I introduced my private swift project.
Here is the script.
 Place this script into fastlane/actions, and run in Fastfile
e.g.
swiftdoc( input: &amp;#34;Sources&amp;#34;, module_name: &amp;#34;YourModuleName&amp;#34;, output: &amp;#34;docs/&amp;#34;, base_url: &amp;#34;/&amp;#34;, format: &amp;#34;html&amp;#34; ) You can publish it into github pages, netlify, and so on.</description>
    </item>
    
    <item>
      <title>How I build this blog</title>
      <link>https://yusuke.cloud/how-i-build-this-blog/</link>
      <pubDate>Wed, 30 Jun 2021 06:49:42 +0000</pubDate>
      
      <guid>https://yusuke.cloud/how-i-build-this-blog/</guid>
      <description>This is a snapshot as of 2021/6. I will write about this blog. This digram shows my blog architecture.
Core  Linode Dokku  I am running this blog on linode VPS. This blog is in a docker container and I am using dokku to manage containers(apps). Dokku is script based Paas and an OSS. Heroku buildpacks are compatible with Dokku since it&amp;rsquo;s a heroku alternative. Thanksfully, you can run any applications on Dokku just by pushing your code.</description>
    </item>
    
    <item>
      <title>Make Comment Great Again</title>
      <link>https://yusuke.cloud/make-comment-great-again/</link>
      <pubDate>Fri, 18 Jun 2021 08:04:24 +0000</pubDate>
      
      <guid>https://yusuke.cloud/make-comment-great-again/</guid>
      <description>I haven&amp;rsquo;t use comment feature on this weblog, but I really wanted to implement it. I have tried Disqus. It was cool but it turned out that it didn&amp;rsquo;t match my needs.
Thought of Disqus Disqus has rich UI and features to discuss blog posts, but it allows
 anonymous comments Ads inclusion  For anonymous comments, my blog thanksfully has almost no comments from readers. However, recently a lot of celebrities receive relentless aggresive comments, and ended up suffering from mental disorder.</description>
    </item>
    
    <item>
      <title>NWPathMonitor</title>
      <link>https://yusuke.cloud/nwpathmonitor/</link>
      <pubDate>Mon, 14 Jun 2021 16:16:05 +0900</pubDate>
      
      <guid>https://yusuke.cloud/nwpathmonitor/</guid>
      <description>Introduction NWPathMonitor is a class in Network framework, which observes network status and monitor network interface. It&amp;rsquo;s available in iOS 12 or later.
import Network You must retain NWPathMonitor instances to get callbacks.
class NetworkMonitorViewController: ViewController { let monitor = NWPathMonitor() } requiredInterface lets you observe the specific network interface.
let wifiMonitor = NWPathMonitor(requiredInterfaceType: .wifi) Here is the list of interfaces that NWPathMonitor supports.
https://developer.apple.com/documentation/network/nwinterface/interfacetype
Detect network changes monitor.pathUpdateHandler = { path in if path.</description>
    </item>
    
    <item>
      <title>Munin Installation Memo</title>
      <link>https://yusuke.cloud/munin-installation-memo/</link>
      <pubDate>Tue, 21 Apr 2020 07:02:57 +0000</pubDate>
      
      <guid>https://yusuke.cloud/munin-installation-memo/</guid>
      <description>Have you ever listened to Munin? Munin is a server resource monitoring tool, which provides graphical interfaces for a bunch of data
Munin is quite simple and easy to set up.
Here, I will write down my configuration when I set up munin lately. I suppose that you are using Ubuntu 18.04 LTS.
$ sudo apt update $ sudo apt install munin munin-node nginx Nginx Configuration server { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; # Add index.</description>
    </item>
    
    <item>
      <title>LSP for Swift</title>
      <link>https://yusuke.cloud/lsp-for-swift/</link>
      <pubDate>Tue, 07 Apr 2020 18:01:03 +0900</pubDate>
      
      <guid>https://yusuke.cloud/lsp-for-swift/</guid>
      <description>What is Language Server Protocol(LSP)?  Language Server Protocol defines standardized protocol with which both a text editor or IDE(client) and a language(server) communicate. The protocol is based on JSONRPC. A client(text editor) can implement  Go to definition Error and warnings Auto completion &amp;hellip;    https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/
 Solves m-times-n complexity problems  What is Sourcekit-LSP?  Apple&amp;rsquo;s LSP implementation on top of sourcekitd and clangd sourcekitd is a framework that provide IDE features clangd for c-family languages (C/C++/ObjC) language server supports only Swift Package Manager project  As of Xcode 11.</description>
    </item>
    
    <item>
      <title>2018 in review</title>
      <link>https://yusuke.cloud/2018-in-review/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yusuke.cloud/2018-in-review/</guid>
      <description>2018 was yet another awesome year.
Commitments in work I worked on building mobile development foundation.
Jenkins CI Exapansion I read this book to learn Jenkins(written in Japanese). Aside from maintaining jenkins, I learned to modify several Jenkins modules, such as Git plugin.(We are using my forked Git plugin now.)
Open API Specification OpenAPI Initiative
Side projects This blog I moved this blog to Linode. What I exactly did is that I moved my blog on docker on Linode instance.</description>
    </item>
    
    <item>
      <title>Network Abstraction Layer</title>
      <link>https://yusuke.cloud/network-abstraction-layer/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yusuke.cloud/network-abstraction-layer/</guid>
      <description>I am experimenting a new way for network request in Kiri library. Kiri is Moya inspired abstract networking layer. I was very impressed by Moya architecture, so to learn from it the most, I decided to trace the same architecture by writing by myself, instead of copy and paste. :D
We need to break down client library into three parts.
Request Normally, you have to construct networking request every time. Instead, in Kiri, your network configuration is compiled in one place, like class, enum.</description>
    </item>
    
    <item>
      <title>Crontab Guru</title>
      <link>https://yusuke.cloud/crontab-guru/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yusuke.cloud/crontab-guru/</guid>
      <description>If you use google whenever you write crontab, this website is good for you.
crontab guru
Crontab format is not intuitive. This website tells you how your cron will work. You can input your own cron job in the rounded textfield, and you can check how it works before you start on your server. It will help you avoid significant mistakes before deploying your job.</description>
    </item>
    
    <item>
      <title>NPM Dependency Graph</title>
      <link>https://yusuke.cloud/npm-dependency-graph/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://yusuke.cloud/npm-dependency-graph/</guid>
      <description>I found the awesome tool to visualize npm dependency graph.
This example shows dependency graph of react-native-maps, which I was investigating last night.
https://npm.anvaka.com/#/view/2d/react-native-maps
2D You can drag nodes, and highlight node with cursor on.
3D You can rotate graph, but 3D doesn&amp;rsquo;t show module names.
 https://npm.anvaka.com/ Github  </description>
    </item>
    
  </channel>
</rss>
