<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>IOS on Yusuke Ohashi</title>
    <link>https://yusuke.cloud/categories/ios/</link>
    <description>Recent content in IOS on Yusuke Ohashi</description>
    <image>
      <title>Yusuke Ohashi</title>
      <url>https://cdn.yusuke.cloud/assets/image/golden-gate-bridge.jpg</url>
      <link>https://cdn.yusuke.cloud/assets/image/golden-gate-bridge.jpg</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Jun 2021 16:16:05 +0900</lastBuildDate>
    <atom:link href="https://yusuke.cloud/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NWPathMonitor</title>
      <link>https://yusuke.cloud/nwpathmonitor/</link>
      <pubDate>Mon, 14 Jun 2021 16:16:05 +0900</pubDate>
      <guid>https://yusuke.cloud/nwpathmonitor/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;NWPathMonitor is a class in Network framework, which observes network status and monitor network interface.
It&amp;rsquo;s available in iOS 12 or later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Network&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You must retain NWPathMonitor instances to get callbacks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NetworkMonitorViewController&lt;/span&gt;: ViewController {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; monitor = NWPathMonitor()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;requiredInterface&lt;/code&gt; lets you observe the specific network interface.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; wifiMonitor = NWPathMonitor(requiredInterfaceType: .wifi)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the list of interfaces that NWPathMonitor supports.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/network/nwinterface/interfacetype&#34;&gt;https://developer.apple.com/documentation/network/nwinterface/interfacetype&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;detect-network-changes&#34;&gt;Detect network changes&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;monitor.pathUpdateHandler = { path &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; path.status == .satisfied {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Connected&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;start-observation&#34;&gt;Start observation&lt;/h2&gt;
&lt;p&gt;Create a background queue, then pass it to &lt;code&gt;start()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LSP for Swift</title>
      <link>https://yusuke.cloud/lsp-for-swift/</link>
      <pubDate>Tue, 07 Apr 2020 18:01:03 +0900</pubDate>
      <guid>https://yusuke.cloud/lsp-for-swift/</guid>
      <description>&lt;h2 id=&#34;what-is-language-server-protocollsp&#34;&gt;What is Language Server Protocol(LSP)?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Language Server Protocol defines &lt;strong&gt;standardized protocol&lt;/strong&gt; with which both a text editor or IDE(client) and a language(server) communicate.&lt;/li&gt;
&lt;li&gt;The protocol is based on &lt;strong&gt;JSONRPC&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A client(text editor) can implement
&lt;ul&gt;
&lt;li&gt;Go to definition&lt;/li&gt;
&lt;li&gt;Error and warnings&lt;/li&gt;
&lt;li&gt;Auto completion&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://microsoft.github.io/language-server-protocol/overviews/lsp/img/language-server-sequence.png&#34; alt=&#34;diagram&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/&#34;&gt;https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solves &lt;em&gt;m-times-n&lt;/em&gt; complexity problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://code.visualstudio.com/assets/api/language-extensions/language-server-extension-guide/lsp-languages-editors.png&#34; alt=&#34;width:600px&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;what-is-sourcekit-lsp&#34;&gt;What is Sourcekit-LSP?&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cdn.yusuke.cloud/assets/image/source_kit_lsp_github.png&#34; alt=&#34;width:800px&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apple&amp;rsquo;s LSP implementation on top of &lt;code&gt;sourcekitd&lt;/code&gt; and &lt;code&gt;clangd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourcekitd&lt;/code&gt; is a framework that provide IDE features&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clangd&lt;/code&gt; for c-family languages (C/C++/ObjC) language server&lt;/li&gt;
&lt;li&gt;supports &lt;strong&gt;only Swift Package Manager project&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As of Xcode 11.4, SourceKit-LSP is a built-in tool.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Network Abstraction Layer</title>
      <link>https://yusuke.cloud/network-abstraction-layer/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://yusuke.cloud/network-abstraction-layer/</guid>
      <description>&lt;p&gt;I am experimenting a new way for network request in &lt;code&gt;Kiri&lt;/code&gt; library.
&lt;code&gt;Kiri&lt;/code&gt; is &lt;code&gt;Moya&lt;/code&gt; inspired abstract networking layer. I was very impressed by &lt;code&gt;Moya&lt;/code&gt; architecture, so to learn from it the most, I decided to trace the same architecture by writing by myself, instead of copy and paste. :D&lt;/p&gt;
&lt;p&gt;We need to break down client library into three parts.&lt;/p&gt;
&lt;h2 id=&#34;request&#34;&gt;Request&lt;/h2&gt;
&lt;p&gt;Normally, you have to construct networking request every time.
Instead, in Kiri, your network configuration is compiled in one place, like class, enum.
And the class, enum must conform to &lt;code&gt;RequestContainer&lt;/code&gt; protocol.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
